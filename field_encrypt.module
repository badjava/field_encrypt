<?php
/**
 * Contains module hooks for field_encrypt
 */

/**
 * Implements hook_form_alter.
 */
function field_encrypt_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // If this is the add or edit form for field_storage, we call our function.
  if ($form_id === 'field_storage_add_form' || $form_id === 'field_storage_config_edit_form') {

    // Check permissions
    $user = \Drupal::currentUser();

    if ($user->hasPermission('administer field encryption')) {
      /**
       * @var \Drupal\field\Entity\FieldStorageConfig
       */
      $field = $form_state->getFormObject()->getEntity();

      // Add our encrypted field to the form.
      $form['encrypt'] = [
        '#type' => 'checkbox',
        '#title' => t('Encrypted'),
        '#description' => t('Makes the field storage encrypted.'),
        '#default_value' => $field->getThirdPartySetting('field_encrypt', 'encrypt', FALSE),
      ];

      // We add a function to process the form when it is saved.
      $form['#entity_builders'][] = 'field_encrypt_form_field_add_form_builder';
    }
  }
}

function field_encrypt_form_field_add_form_builder($entity_type, \Drupal\field\Entity\FieldStorageConfig $fieldStorageConfig, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {

  // If the form has the value, we set it.
  if ($form_state->getValue('encrypt')) {
    $fieldStorageConfig->setThirdPartySetting('field_encrypt', 'encrypt', $form_state->getValue('encrypt'));

    // TODO: We need to process the field to either batch encrypt or batch decrypt if the setting was changed.

  }
  else {
    // If there is no value, remove.
    $fieldStorageConfig->unsetThirdPartySetting('field_encrypt', 'encrypt');
  }
}

function field_encrypt_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  $x = 1;
}

function field_encrypt_entity_load($entities, $entity_type) {

  foreach($entities as &$entity) {
    // Make sure we can get field definitions.
    if (!is_callable([$entity, 'getFieldDefinitions'])){return;}
    if (!is_callable([$entity, 'getFields'])){return;}
    //$entity->getFieldDefinitions();
    $entity->getFields();

    foreach($entity->getFieldDefinitions() as $name => $definition) {
      if (!is_callable([$definition, 'get'])){continue;}

      $storage = $definition->get('fieldStorage');
      if (is_null($storage)) {continue;}

      $encrypted = $storage->getThirdPartySetting('field_encrypt', 'encrypt', FALSE);

      if ($encrypted) {
        // Load the encyption service.
        // @var \Drupal\encrypt\EncryptService
        $encryption_service = Drupal::service('encryption');

        $replacement = $encryption_service->decrypt($entity->get($name)->value);
        $entity->set($name, $replacement);
      }
    }
  }
}


